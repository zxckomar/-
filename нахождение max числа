from random import randint
A = [randint(0,6) for i in range(6)]
print("Массив:")
print(*A)
print("Результат:")
A.insert(0, A[5])
A.pop(6)
print(*A)

'''#2
from random import randint
A = [randint(0,6) for i in range(6)]
print ("Массив:")
print (*A)
print("Результат:")
z = len(A)//2-1
print(*A[z::-1] + A[:z:-1])
'''
'''#3
from random import randint
A = [randint(-100,100) for i in range(6)]
print ("Массив:")
print (*A)
print("Результат:")
A.sort(reverse=True)
if 0 in A:
    A.remove(0)
    A.append(0)
zxc = 0
for i in A:
    if i>0:
        zxc+=1
print(*A)
print("Количество положительных элементов:",zxc)
'''

#змейка брейк

from tkinter import Tk, Canvas
import random

# Globals
WIDTH = 800
HEIGHT = 600
SEG_SIZE = 20
IN_GAME = True


# Helper functions
def create_block():
    """ Creates an apple to be eaten """
    global BLOCK
    posx = SEG_SIZE * random.randint(1, (WIDTH-SEG_SIZE) / SEG_SIZE)
    posy = SEG_SIZE * random.randint(1, (HEIGHT-SEG_SIZE) / SEG_SIZE)
    BLOCK = c.create_oval(posx, posy,
                          posx+SEG_SIZE, posy+SEG_SIZE,
                          fill="red")


def main():
    """ Handles game process """
    global IN_GAME
    if IN_GAME:
        s.move()
        head_coords = c.coords(s.segments[-1].instance)
        x1, y1, x2, y2 = head_coords
        # Check for collision with gamefield edges
        if x2 > WIDTH or x1 < 0 or y1 < 0 or y2 > HEIGHT:
            IN_GAME = False
        # Eating apples
        elif head_coords == c.coords(BLOCK):
            s.add_segment()
            c.delete(BLOCK)
            create_block()
        # Self-eating
        else:
            for index in range(len(s.segments)-1):
                if head_coords == c.coords(s.segments[index].instance):
                    IN_GAME = False
        root.after(100, main)
    # Not IN_GAME -> stop game and print message
    else:
        set_state(restart_text, 'normal')
        set_state(game_over_text, 'normal')


class Segment(object):
    """ Single snake segment """
    def __init__(self, x, y):
        self.instance = c.create_rectangle(x, y,
                                           x+SEG_SIZE, y+SEG_SIZE,
                                           fill="white")


class Snake(object):
    """ Simple Snake class """
    def __init__(self, segments):
        self.segments = segments
        # possible moves
        self.mapping = {"Down": (0, 1), "Right": (1, 0),
                        "Up": (0, -1), "Left": (-1, 0)}
        # initial movement direction
        self.vector = self.mapping["Right"]

    def move(self):
        """ Moves the snake with the specified vector"""
        for index in range(len(self.segments)-1):
            segment = self.segments[index].instance
            x1, y1, x2, y2 = c.coords(self.segments[index+1].instance)
            c.coords(segment, x1, y1, x2, y2)

        x1, y1, x2, y2 = c.coords(self.segments[-2].instance)
        c.coords(self.segments[-1].instance,
                 x1+self.vector[0]*SEG_SIZE, y1+self.vector[1]*SEG_SIZE,
                 x2+self.vector[0]*SEG_SIZE, y2+self.vector[1]*SEG_SIZE)

    def add_segment(self):
        """ Adds segment to the snake """
        last_seg = c.coords(self.segments[0].instance)
        x = last_seg[2] - SEG_SIZE
        y = last_seg[3] - SEG_SIZE
        self.segments.insert(0, Segment(x, y))

    def change_direction(self, event):
        """ Changes direction of snake """
        if event.keysym in self.mapping:
            self.vector = self.mapping[event.keysym]

    def reset_snake(self):
        for segment in self.segments:
            c.delete(segment.instance)


def set_state(item, state):
    c.itemconfigure(item, state=state)


def clicked(event):
    global IN_GAME
    s.reset_snake()
    IN_GAME = True
    c.delete(BLOCK)
    c.itemconfigure(restart_text, state='hidden')
    c.itemconfigure(game_over_text, state='hidden')
    start_game()


def start_game():
    global s
    create_block()
    s = create_snake()
    # Reaction on keypress
    c.bind("<KeyPress>", s.change_direction)
    main()


def create_snake():
    # creating segments and snake
    segments = [Segment(SEG_SIZE, SEG_SIZE),
                Segment(SEG_SIZE*2, SEG_SIZE),
                Segment(SEG_SIZE*3, SEG_SIZE)]
    return Snake(segments)


# Setting up window
root = Tk()
root.title("PythonicWay Snake")


c = Canvas(root, width=WIDTH, height=HEIGHT, bg="#003300")
c.grid()
# catch keypressing
c.focus_set()
game_over_text = c.create_text(WIDTH/2, HEIGHT/2, text="GAME OVER!",
                               font='Arial 20', fill='red',
                               state='hidden')
restart_text = c.create_text(WIDTH/2, HEIGHT-HEIGHT/3,
                             font='Arial 30',
                             fill='white',
                             text="Click here to restart",
                             state='hidden')
c.tag_bind(restart_text, "<Button-1>", clicked)
start_game()
root.mainloop()
'''
A = []
for x in range(13):
    y = bin(x)
    z = str(y[2:])
    if x % 2 == 0:
        int((z + "10"), 2)
        A.append(int((z + "10"), 2))
    elif x % 2 != 0:
        int(("1" + z + "01"), 2)
        A.append(int(("1" + z + "01"), 2))
print(max(A))
'''
 �ò�          ��     ���h� *   *   ������ )4V    )4V��2      ��d���h�{ *   *    )4V c�E�    c�E���d )4V��2���h.� *   *   ������ )4V    )4V�������������h� 6   6    )4V������ E  (   @�����d�� P  �    P  b�  ���h�{ 6   6   ������ )4V E  (   @���d�� P��  �  �P  [  ���hO 6   6    )4V������ E  (   @�����d�� P  �  �P  [  ���h� �  �   )4V������ E u   @������d�� P  �  �P  �A  GET /admin/dashboard HTTP/1.1
Host: 192.168.1.100
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
Authorization: Basic YWRtaW46c2VjcmV0MTIz
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive

���h.� E  E  ������ )4V E 7   @����d�� P��  �  6P  c�  HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Wed, 12 Sep 2024 10:30:00 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 1024
Set-Cookie: session_token=abc123def456; Path=/; HttpOnly
X-Flag: vsosh{http_ba$ic_c4ptured}
Connection: keep-alive

<!DOCTYPE html>
<html>
<head><title>Admin Dashboard</title></head>
<body>
<h1>Welcome, admin!</h1>
<p>You have successfully logged into the admin panel.</p>
<p>Secret flag: vsosh{http_ba$ic_c4ptured}</p>
<div>System Status: All systems operational</div>
</body>
</html>���h� 6   6    c�E� )4V E  (   @����2��d09 P  �    P  ��  ���h�{ 6   6    )4V c�E� E  (   @����d��2 P09  p  �P  �i  ���hO 6   6    c�E� )4V E  (   @����2��d09 P  �  qP  �j  ���h� �   �    c�E� )4V E  �   @�G��2��d09 P  �  qP  ��  GET /admin/users HTTP/1.1
Host: 192.168.1.100
User-Agent: curl/7.68.0
Authorization: Basic YWRtaW46c2VjcmV0MTIz
Accept: */*
X-Forwarded-For: 203.0.113.1

���h.� N  N   )4V c�E� E @   @����d��2 P09  q  *P  o�  HTTP/1.1 200 OK
Server: nginx/1.18.0
Content-Type: application/json
Content-Length: 156

{"users": [
    {"id": 1, "username": "admin", "role": "administrator", "email": "admin@company.com"},
    {"id": 2, "username": "user1", "role": "user", "email": "user1@company.com"}
]}���h� G   G     ^  )4V E  9   @����2�� 5 %�<          examplecom   ���h� [   [    )4V������ E  M   @���]��"�n P        P  ��  GET / HTTP/1.1
Host: example.com


